module Purchases
  class ReportService
    def initialize(purchase)
      @purchase = purchase
    end

    def self.call(purchase)
      new(purchase).send_report
    end

    def send_report
      send @purchase.status
    end

    private

    def acknowledged
      msg = "‚úÖ –ó–∞–∫—É–ø–∫–∞ #Ô∏è‚É£#{@purchase.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
      TelegramJob.perform_later(msg: msg)
    end

    def shipped
      msg = "üì¶ –ó–∞–∫—É–ø–∫–∞ ##{@purchase.id} –æ—Ç–≥—Ä—É–∂–µ–Ω–∞"
      msg += "\n\nüí∞ –°—É–º–º–∞: #{@purchase.total} ‚Ç∫"
      msg += I18n.t('purchases.messages.send_supplier', count: @purchase.purchase_items.count)
      msg += "\n\n#{purchase_items_str}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:test_ids))
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:courier_tg_id))
    end

    def sent_to_supplier
      msg = "üì¶ –ó–∞–∫—É–ø–∫–∞ ##{@purchase.id}"
      msg += "\n\nüí∞ –°—É–º–º–∞: #{@purchase.total} ‚Ç∫"
      msg += I18n.t('purchases.messages.send_supplier', count: @purchase.purchase_items.count)
      msg += "\n\n#{purchase_items_str}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:test_ids))
    end

    def received
      msg = "‚úÖ –ó–∞–∫—É–ø–∫–∞ #Ô∏è‚É£#{@purchase.id} –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥"
      msg += I18n.t('purchases.messages.send_supplier', count: @purchase.purchase_items.count)
      msg += "\n\n#{purchase_items_str}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:courier_tg_id))
    end

    def stocked
      msg = "‚úÖ –ó–∞–∫—É–ø–∫–∞ #Ô∏è‚É£#{@purchase.id} –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞"
      msg += I18n.t('purchases.messages.send_supplier', count: @purchase.purchase_items.count)
      msg += "\n\n#{purchase_items_str}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: :courier)
    end

    def purchase_items_str(prices = nil)
      @purchase.purchase_items.includes(:product).map.with_index(1) do |item, idx|
        str = "#{idx}. #{item.product.name} ‚Äì #{item.quantity} —à—Ç."
        str += " x #{item.unit_cost}‚Ç∫ = #{item.line_total}‚Ç∫" if prices
        str
      end.join("\n")
    end
  end
end
