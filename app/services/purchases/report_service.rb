module Purchases
  class ReportService
    def initialize(purchase)
      @purchase = purchase
    end

    def self.call(purchase)
      new(purchase).send_report
    end

    def send_report
      send @purchase.status
    end

    private

    def sent_to_supplier
      msg = "üì¶ –ó–∞–∫—É–ø–∫–∞ ‚Ññ#{@purchase.id}"
      msg += "\n\nüí∞ –°—É–º–º–∞: #{@purchase.total} ‚Ç∫"
      msg += I18n.t('purchases.messages.send_supplier', count: @purchase.purchase_items.count)
      msg += "\n\n#{purchase_items_str(true)}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:admin_ids), markup: 'purchase_paid')
      send_to_supplier(msg)
    end

    def shipped
      Rails.logger.info "–ó–∞–∫—É–ø–∫–∞ ‚Ññ#{@purchase.id} –æ—Ç–≥—Ä—É–∂–µ–Ω–∞"
      send_to_supplier("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂–∫—É –∑–∞ –ó–∞–∫—É–ø–∫—É ‚Ññ#{@purchase.id}")
    end

    def stocked
      msg = "‚úÖ –ó–∞–∫—É–ø–∫–∞ ‚Ññ#{@purchase.id} –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞"
      msg += "\n\n–û–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ #{@purchase.purchase_items.count} —Ç–æ–≤–∞—Ä–æ–≤:\n\n#{stoked_str}"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: :courier)
      send_to_supplier "‚úÖ –ó–∞–∫—É–ø–∫–∞ ‚Ññ#{@purchase.id} –ø—Ä–∏–Ω—è—Ç–∞"
    end

    def cancelled
      msg = "‚ùå –ó–∞–∫—É–ø–∫–∞ ‚Ññ#{@purchase.id} –æ—Ç–º–µ–Ω–µ–Ω–∞"
      Rails.logger.info msg
      TelegramJob.perform_later(msg: msg, id: Setting.fetch_value(:admin_ids))
      send_to_supplier(msg)
    end

    def purchase_items_str(prices = nil)
      @purchase.purchase_items.includes(:product).map.with_index(1) do |item, idx|
        str = "#{idx}. #{item.product.name} ‚Äì #{item.quantity} —à—Ç."
        str += " x #{item.unit_cost}‚Ç∫ = #{item.line_total}‚Ç∫" if prices
        str
      end.join("\n")
    end

    def stoked_str
      @purchase.purchase_items.includes(:product).map.with_index(1) do |item, idx|
        "#{idx}. #{item.product.name} ‚Äì #{item.product.stock_quantity} —à—Ç."
      end.join("\n")
    end

    def send_to_supplier(msg)
      supplier_tg_id = Setting.fetch_value(:supplier_tg_id)
      return if supplier_tg_id.blank? || msg.blank?

      tg_token_supplier = Setting.fetch_value(:tg_token_supplier)
      TelegramJob.perform_later(msg: msg, id: supplier_tg_id, tg_token: tg_token_supplier)
    end
  end
end
