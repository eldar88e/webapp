<div class="main-block">
  <div id="authorisation">
    <h1>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
    <div class="load8">
      <div class="loader">Loading...</div>
    </div>
  </div>
  <div id="redirect-bot" style="display: none;">
    <h1>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
    <p class="mb-3">–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞.</p>
    <ul class="mb-3">
      <li class="mb-2">1. –û—Ç–∫—Ä–æ–π—Ç–µ <%= link_to "@#{Setting.fetch_value(:tg_main_bot)}", "https://t.me/#{Setting.fetch_value(:tg_main_bot)}", style: "color: #48c928;" %></li>
      <li class="mb-2">2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start </li>
      <li class="mb-2">3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—à–ª—ë—Ç –±–æ—Ç, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥</li>
    </ul>
    <p class="mb-3">üìå –ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç—å /start, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.</p>
    <p>üîπ –ê–≤—Ç–æ-–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:<br>–ß–µ—Ä–µ–∑ <span id="countdown">15</span> —Å–µ–∫—É–Ω–¥ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–∞.</p>
  </div>
</div>

<script>
    const preloader = document.getElementById('authorisation');
    const bot = document.getElementById('redirect-bot');
    const tg_main_bot = "https://t.me/<%= settings[:tg_main_bot] %>";
    const fetchUserChecker = (retryDelay=null) => {
        fetch("/user-checker?user_id=<%= current_user.id %>")
            .then((response) => response.json())
            .then((data) => {
                if (data.started) {
                    window.location.href = '/';
                } else {
                    if (retryDelay) {
                        setTimeout(() => {
                            fetchUserChecker();
                        }, retryDelay);
                    } else {
                        redirectToBot();
                    }
                }
            })
            .catch((error) => {
                console.log("Error during authentication:", error);
                if (retryDelay) {
                    setTimeout(() => {
                        fetchUserChecker();
                    }, retryDelay);
                } else {
                    redirectToBot();
                }
            });
    }

    const redirectToBot = () => {
        preloader.style.display = 'none';
        bot.style.display = 'block';
        const countdownEl = document.getElementById('countdown');
        let seconds = countdownEl.textContent;
        setInterval(() => {
            seconds--;
            countdownEl.textContent = seconds;
        }, 1000);
        setTimeout(() => {
            window.location.href = tg_main_bot;
        }, 15000);
    }

    document.addEventListener("DOMContentLoaded", () => {
        setTimeout(() => {
            fetchUserChecker(2000);
        }, 2000);
    });
</script>
